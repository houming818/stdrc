#! /usr/bin/env bash

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, overwrite the one in /etc/profile)
PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '

# Determine OS platform
UNAME=$(uname | tr "[:upper:]" "[:lower:]")
# If Linux, try to determine specific distribution
if [ "$UNAME" == "linux" ]; then
    # If available, use LSB to identify distribution
    if [ -f /etc/lsb-release -o -d /etc/lsb-release.d  ]; then
        export DISTRO=$(cat /etc/os-release /etc/os-release |grep -Po '(CentOS|Ubuntu|Debian)'|head -n 1)
        # Otherwise, use release info file
    else
        export DISTRO=$(cat /etc/system-release | cut -d\  -f 1)
    fi
    DISTRO=$(echo $DISTRO|tr "[:upper:]" "[:lower:]")
fi

# For everything else (or if above failed), just use generic identifier
[ "$DISTRO" == "" ] && export DISTRO=$UNAME
unset UNAME

export BASH_THEME=$HOME/.stdrc/std/zcolor.sh
if [[ -f $BASH_THEME  ]]; then
    export DEFAULT_USER=`whoami`
    source $BASH_THEME
fi

if [ -d ~/.config/std/ ]; then
    for i in ~/.config/std/*; do
        source $i;
    done
fi


# Runs prompt (this bypasses bash_it $PROMPT setting)
 
###############
# alias start #

# 一般命令改造
alias ..='cd ..'
alias rm='rm -i'
alias cp='cp -i'
alias mv='mv -i'
alias ls="ls --time-style=iso --color=auto"
alias ll="ls --time-style=iso --color -al"
alias grep='grep --color=auto'

alias spy="python -c 'import IPython; IPython.terminal.ipapp.launch_new_instance()'"

# 添加增强命令
alias stmux="TERM=screen-256color tmux -f $HOME/.stdrc/std/tmux.conf"
alias snpm="npm --registry=https://registry.npm.taobao.org --cache=$HOME/.npm/.cache/cnpm --disturl=https://npm.taobao.org/dist --userconfig=$HOME/.cnpmrc"
alias spip="pip -i https://pypi.douban.com/simple"
alias spx="proxychains4 -q -f ~/.local/etc/proxychains4.conf "

# alias for grepcode.cn

# alias end #
#############

shopt -s histappend
PROMPT_COMMAND="history -a;$PROMPT_COMMAND"
HISTSIZE=65535
HISTTIMEFORMAT=`echo -e ${red}[%F %T] ${normal}`


# The next line updates PATH for the Google Cloud SDK.
if [ -f "/usr/local/google-cloud-sdk/path.bash.inc" ]; then source "/usr/local/google-cloud-sdk/path.bash.inc"; fi

# The next line enables shell command completion for gcloud.
if [ -f "/usr/local/google-cloud-sdk/completion.bash.inc" ]; then source "/usr/local/google-cloud-sdk/completion.bash.inc"; fi

# kubectl functions
if type kubectl >/dev/null 2>&1; then
    source <(kubectl completion bash)
fi

# std* functions
sdoc() {

    if [ "$1" == "" ] ; then
        cat ~/.stdrc/doc/note.txt
        return 0
    fi

    if [ "$1" != "" ] ; then
        cat ~/.stdrc/doc/$1.txt
        return 0
    fi

    return 0
}

stdrc() {
    if [ ! -d ~/.stdrc ]; then
        git clone https://gitee.com/stduolc/stdrc.git ~/.stdrc
    else
        cd ~/.stdrc
        git pull
    fi
    return 0
}

sgeo() {
    if [ x"$1" == x"" ]; then
        curl -s https://t.grepcode.cn/geo?ip=$(curl -s https://t.grepcode.cn)
        return
    fi
    curl -s https://t.grepcode.cn/geo?ip=$1
    return
}

sdig() {
    if [ "$1" == "info" ]; then
        curl "https://t.grepcode.cn/dig_info" 2>/dev/null
        return
    fi

    if [ "$1" == "myip" ]; then
        dig +short myip.opendns.com @resolver1.opendns.com
        return
    fi

    if [ -n "$1" ] && [ -n "$2" ] && [ -n "$3" ]; then
        curl "https://t.grepcode.cn/dig?domain=$1&dns=$2&_fmt=$3" 2>/dev/null
    elif [ -n "$1" ] && [ -n "$2" ] ; then
        curl "https://t.grepcode.cn/dig?domain=$1&dns=$2&_fmt=text" 2>/dev/null
    elif [ -n "$1" ] ; then
        curl "https://t.grepcode.cn/dig?domain=$1&dns=0@CN&_fmt=text" 2>/dev/null
    fi
}

sk8s() {
    if [ "$1" == "ns" ]; then
        echo switch namespace to $2
        kubectl config set-context --current --namespace=$2
        return
    fi
}

sspeed() {
    #IPINFO=$(curl https://api.myip.com 2>/dev/null)
    #IPINFO_IP=$(echo "$IPINFO"|grep -oP '\d+\.\d+\.\d+\.\d+')
    #IPINFO_CC=$(echo "$IPINFO"|grep -oP '(?<="cc":")\w*')

    # if [ "$IPINFO_CC" == "CN" ]; then
    #     STATIC_HOST="https://www.grepcode.cn"
    # else
    #     STATIC_HOST="https://stdhi.github.io"
    # fi

    #STATIC_HOST="https://pages.grepcode.cn"

    if [ $1 == 'stdout' ]; then
        perl -e 'while (<>) {$l++;if (time > $e) {$e=time;print "$l\n";$l=0}}'
        return 0
    fi

    if [ $1 == 'net' ]; then
        curl -sL "$REPO_HOST/root/sinit/-/raw/main/speedtest.py.txt" | python -
        return 0
    fi

    echo 'usage: sspeed [net|stdout]'
    return 0

}

swhois() {
  whois -h $(whois -h whois.iana.org ${1##*.} |   egrep -e '^whois:' |   sed -e 's/[[:space:]][[:space:]]*/ /g' |   cut -d " " -f 2) $1
}

spass() {
    if [ "$2" ]; 
    then
        echo $(head -n 128 /dev/urandom |tr -dc $2|cut -b 1-$1)
        return 0
    fi
    if [ "$1" ];
    then
        echo $(head -n 128 /dev/urandom |tr -dc 'a-zA-Z0-9'|cut -b 1-$1)
        return 0
    fi
    echo "usage: spass [count] [alphabet:a-zA-Z0-9]"
    return 0
}

# git 相关俚语
#alias sgit="git -c http.proxy=socks5://hm.grepcode.cn:5080 -c http.sslVerify=False "

stdd () {

    if [ $STDEBUG ]; then
        true
    fi

    if [ "$1" == "tags" ];
    then
        wget -q https://registry.hub.docker.com/v1/repositories/$2/tags -O -  | sed -e 's/[][]//g' -e 's/"//g' -e 's/ //g' | tr '}' '\n'  | awk -F: '{print $3}'
        return 0
    fi

    if [ "$1" == "login" ];
    then
        if [ "$#" == "1" ];
        then
            echo "usage: stdd login [aliyun|aws|*]"
            return 0
        fi
        if [ "$2" == "aliyun" ];
        then
            sudo docker login registry.cn-hangzhou.aliyuncs.com
        fi
        return 0
    fi

    echo "usage: stdd [login|tags]"
}

sgo () {
    if [ "$1" == "newproject" ]; 
    then
        mkdir $2
        cd $2

        mkdir -p cmd/myapp
        mkdir -p pkg/mypackage
        mkdir -p internal/myinternalpackage
        mkdir -p api
        mkdir -p web/static/css
        mkdir -p web/static/js
        mkdir -p web/templates
        mkdir -p configs
        mkdir -p scripts
        mkdir -p test/mypackage
        touch README.md
        return 0
    fi

    echo "usage: sgo [newproject] [projectname]"
    echo "example: sgo newproject myapp"
}

export PATH=~/.local/bin:/usr/local/go/bin:$PATH
